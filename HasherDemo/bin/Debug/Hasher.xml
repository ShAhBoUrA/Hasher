<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hasher</name>
    </assembly>
    <members>
        <member name="T:Hasher.StringHasher">
            <summary>
            Class implementing various string hashing algorithms.
            </summary>
        </member>
        <member name="M:Hasher.StringHasher.MD5ComputeHash(System.String)">
            <summary>
            Hashes a string using MD5 Algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.MD5SaltComputeHash(System.String,System.String@)">
            <summary>
            Adds randomly generated SALT to the string then hashes the string using MD5 Algorithm.
            The salt has the same length as the one generated by the algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <param name="salt">Salt used with password.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.MD5VerifyHash(System.String,System.String)">
            <summary>
            Verifies string against another MD5 hashed string.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The MD5 generated hash to verify against.</param>
            <returns>Boolean indicating whether the string match the hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.MD5SaltVerifyHash(System.String,System.String,System.String)">
            <summary>
            Verifies string against another MD5 SALT hashed string.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The MD5 SALT generated hash to verify against.</param>
            <param name="salt">Salt used with password.</param>
            <returns>Boolean indifcating whether the string match the SALT hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA256ComputeHash(System.String)">
            <summary>
            Hashes a string using SHA256 Algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA256SaltComputeHash(System.String,System.String@)">
            <summary>
            Adds randomly generated SALT to the string then hashes the string using SHA256 Algorithm.
            The salt has the same length as the one generated by the algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <param name="salt">Salt used with password.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA256VerifyHash(System.String,System.String)">
            <summary>
            Verifies string against another SHA256 hashed string.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The SHA256 generated hash to verify against.</param>
            <returns>Boolean indicating whether the string match the hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA256SaltVerifyHash(System.String,System.String,System.String)">
            <summary>
            Verifies string against another SHA256 SALT hashed string.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The SHA256 SALT generated hash to verify against.</param>
            <param name="salt">Salt used with password.</param>
            <returns>Boolean indifcating whether the string match the SALT hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA512ComputeHash(System.String)">
            <summary>
            Hashes a string using SHA512 Algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA512SaltComputeHash(System.String,System.String@)">
            <summary>
            Adds randomly generated SALT to the string then hashes the string using SHA512 Algorithm.
            The salt has the same length as the one generated by the algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <param name="salt">Salt used with password.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA512VerifyHash(System.String,System.String)">
            <summary>
            Verifies string against another SHA512 hashed string.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The SHA512 generated hash to verify against.</param>
            <returns>Boolean indicating whether the string match the hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.SHA512SaltVerifyHash(System.String,System.String,System.String)">
            <summary>
            Verifies string against another SHA512 SALT hashed string.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The SHA512 SALT generated hash to verify against.</param>
            <param name="salt">Salt used with password.</param>
            <returns>Boolean indifcating whether the string match the SALT hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Computes the hash of string using the passed hashed algorithm.
            </summary>
            <param name="hashAlgorithm">The hash algorithm to use in computing.</param>
            <param name="stringToHash">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:Hasher.StringHasher.VerifySaltHash(System.String,System.String,System.String,Hasher.StringHasher.HashAlgorithMethod)">
            <summary>
            Verifies string against another SALT hashed string using the passed hashing algorithm.
            </summary>
            <param name="stringToVerify">The string to verify.</param>
            <param name="hash">The generated SALT hash to verify against.</param>
            <param name="salt">Salt used with password.</param>
            <param name="algorithmToInvoke">The hash algorithm to use in verifying.</param>
            <returns>Boolean indicating whether the string match the SALT hash or not.</returns>
        </member>
        <member name="M:Hasher.StringHasher.DisposeAlgorithm(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Disposes hashing algorithm.
            </summary>
            <param name="hashAlgorithm">The hash algorithm to dispose.</param>
        </member>
        <member name="M:Hasher.StringHasher.GenerateRandomSalt(System.Int32)">
            <summary>
            Generates random SALT with the specified length.
            </summary>
            <param name="saltLength">Length of SALT to generate.</param>
            <returns>The randomly generated SALT.</returns>
        </member>
        <member name="M:Hasher.StringHasher.BytesToHexadecimalString(System.Byte[])">
            <summary>
            Converts given bytes array to their corresponding hexadecimal string.
            </summary>
            <param name="bytesToConvert">The bytes array to convert.</param>
            <returns>The corresponding string representation.</returns>
        </member>
        <member name="M:Hasher.StringHasher.AreTwoStringsEqual(System.String,System.String)">
            <summary>
            Compares two hashes ignoring their cases.
            </summary>
            <param name="hash">The first hash to compare.</param>
            <param name="hashedString">The second hash to compare.</param>
            <returns>Boolean indicating whether hashes are equal or not.</returns>
        </member>
        <member name="T:Hasher.StringHasher.HashAlgorithMethod">
            <summary>
            Delegate represents hash method implementing certain hashing algorithm.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
    </members>
</doc>
